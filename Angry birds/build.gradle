buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    // Required for JUnit Platform support in Gradle
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 11
  dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
  }

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")

    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")

    // Delete that file in case we've already created it
    assetsFile.delete()

    // Iterate through all files inside that folder
    // Convert it to a relative path
    // And append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
      assetsFile.append(it + "\n")
    }
  }

  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }

  // Configure the test task for JUnit 5
  test {
    useJUnitPlatform() // Use JUnit 5 platform for testing
    testLogging {
      events 'passed', 'failed', 'skipped' // Log passed, failed, and skipped tests
    }
    // Specify the directories for test discovery
    // Ensure test directories are correctly configured
    include '**/Sprites/CatapultTest*' // Specify the test pattern or class name here

    // Explicitly specify the test source set if necessary
    // This is optional and can be adjusted based on your project structure
    sourceSets {
      test {
        java {
          srcDirs = ['src/test/java']
        }
      }
    }
  }
}

subprojects {
  version = '$projectVersion'
  ext.appName = 'Angry Birds'

  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    mavenLocal() // Local repository
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'Angry Birds' + '-parent'
